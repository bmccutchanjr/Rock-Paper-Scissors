// A on-line multi-player implementation of Rock/Paper/Scissors.  This script assumes no more than two
// players to a game.  And unfortunately, it can't support multiple games

var PlayerOne = {};
var PlayerTwo = {};
var iAmPlayerOne = false;
var messages = [];          // an array of messages generated by the script or sent by the players

// I was going to put messages[] on Firebase but it seems overly complicated, just pass the most recent
// message between players and concatenate the array in the script.  Much simpler, much cleaner.  It means
// the players won't see exactly the same messages...but the differences will be messages generated by
// the script specific to the players.  So that's okay. 

// audio files
var buzz = new Audio ("audio/buzz.mp3");

function pushMessage(message)
{   // concatenates messages[] for history and show the last two messages on the page

    messages.push(message);

    mLength = messages.length;

    var mDiv = $(".messages");
    mDiv.empty();

    for (var i=0; i<2; i++)
    {   var pTag = $("<p>");
        pTag
            .text(messages[mLength - (i + 1)]);

        mDiv
            .prepend(pTag);
    }
}

function setMessage(database, message)
{   // database.set() messages to Firebase

    database.ref("/Message").set(
    {   Message: message
    })
}

function setName(database, pNumber, pName)
{   // Uses database.set() to update the database reference point with the players name.  Choice is
    // assigned an empty string because they haven't had a chance to select it yet

    if ((pNumber === "PlayerOne") || (pNumber === "PlayerTwo"))
    {   database.ref("/" + pNumber).set(
        {   Name: pName,
            Choice: ""
        })
    }
    else
    {   displayErrorMessage ("something very strange happened\n\nsetname(" + pNumber, ", " + pName + ")");
    }
}

var connected = false;

function isConnected()
{   // A simple function to test if the page has previously loaded and connected to Firebase.  Prevents
    // some actions from occuring each time a player makes a Rock/Paper/Scissors choice

// 03     if (whichPlayer() && PlayerOne)
// 03     {   // If this is player one and a PlayerOne object exists, the page has previously mades its
// 03         // connection to Firebase and the game has been initialized
// 03     
// 03         return true;
// 03     }
// 03 
// 03     if (whichPlayer() && PlayerTwo)
// 03     {   // If this is player two and a PlayerTwo object exists, the page has previously mades its
// 03         // connection to Firebase and the game has been initialized
// 03    
// 03         return true;
// 03     }
// 03 
// 03     // Otherwise return false
// 03     return false;
    return connected;
}

function joinGame(database)
{   // Join a game already in progress

console.log("joinGame()");

    // Create a database node for player two
    setName(database, whichPlayer (), "");

    // And let the other player know an opponent is connecting
    database.ref("/Message").set(
    {   Message:
        {   Message: "A new player is connecting"
        }
    });

    return true;
}

function initializeGame(database)
{   // Initialize a game

    // if the script is initializing the game, this is playerOne

    iAmPlayerOne = true;

    // And now create a node in Firebase for Player One

    setName(database, whichPlayer (), "");

    database.ref("/PlayerTwo").remove();

    database.ref("/Message").remove();

    // And initialize the objects representing the players

    PlayerOne = {};
    PlayerTwo = {};

    return true;
}

function whichPlayer()
{   // simply returns the string "playerOne" or "playerTwo" depending on the value of iAmPlayerOne

    if (iAmPlayerOne) return "PlayerOne";

    return "PlayerTwo";
}

function playAudio(sound)
{   // play audio

    // this is pretty simple and may seem odd to make it a function, but audio files do not always play
    // properly if they are not explicitly loaded before playing.  So this function just makes sure it
    // happens every time.

    try
    {   // It is an error to to play an audio file before the user interacts with the page.  Why that
        // would be I don't know.  This page throws an error here, even though it can't happen before
        // the user interacts with the page.  It is not a fatal error (the script continues to execute)
        // but still.  SO I'm wrapping it in a try/catch block that does nothing...because nothing needs
        // to be done.
        
        sound.load();
        sound.play();
    }
    catch (e)
    {   // I don't want to do anything with this error
    }
}

function fadeError()
{   // use jQuery to animate the opacity of the error message message after displayed for 5 seconds
    // once the error message of fully transparent, remove it from the DOM.

    $(".error-div").animate({opacity: 0.1}, 2000, function()
    {
        $(".error-wrapper").remove(); 
    });
}

function displayErrorMessage(error)
{   // display an error message on the screen and set a timer to remove the message after it has been
    // displayed for 5 seconds

    playAudio (buzz);

    var heading = $("<div>");

    heading
        .addClass ("error-heading")
        .text ("ERROR!");
    
    var message = $("<div>");

    message
        .addClass ("error-message")
        .text (error);
        
    var errorDiv = $("<div>");

    errorDiv
        .addClass ("error-div")
        .append(heading)
        .append(message);
    
    var wrapper = $("<div>");
    wrapper
        .addClass("error-wrapper")
        .append(errorDiv);

    $("body").append (wrapper);

    setTimeout (fadeError, 5000);
}

function numberOfPlayers ()
{   // How many players are already connected to the game

    var number = 0;
    if (PlayerOne.Name) ++number;
    if (PlayerTwo.Name) ++number;

    return number;
}

$(document).ready(function()
{   //
    //
    
    // Initialize Firebase

    var config =
    {   apiKey: "AIzaSyD1e2P0WVFVjRCewvFURl2lTpR26BwfG7c",
        authDomain: "rock-paper-scissors-2e60c.firebaseapp.com",
        databaseURL: "https://rock-paper-scissors-2e60c.firebaseio.com",
        projectId: "rock-paper-scissors-2e60c",
        storageBucket: "",
        messagingSenderId: "429649976880"
    };

    firebase.initializeApp(config);
    var database = firebase.database();

    var connectionsRef = database.ref("/connections");
    var connectedRef = database.ref(".info/connected");
  
    var counterDiv = $("#player-count");

    database.ref("PlayerOne").on("value", function(snap)
    {   // The event listener for the database reference "/PlayerOne"

        // PlayerOne has the data specific to Player One.  At this time that is just a name and
        // their Rock/Paper/Scissor choice

        if (snap.val())
        {   // If the snap shot has a value.  It should...

            PlayerOne = snap.val();

            if (numberOfPlayers() === 2)
            {   // only do this if both player1 and player2 have connected
            
                var nameDiv = $("#your-name");
                var pTag = $("<p>");
                pTag.html("<b>" + PlayerOne.Name + "</b> vs. <b>" + PlayerTwo.Name + "</b>");
                nameDiv.append(pTag);
            }
        }
    });

    database.ref("PlayerTwo").on("value", function(snap)
    {   // The event listener for the for the database reference "/PlayerTwo"

        // PlayerTwo has the data specific to Player Two.  At this time that is just a name and
        // their Rock/Paper/Scissor choice

        if (snap.val())
        {   
            PlayerTwo = snap.val();

            if (numberOfPlayers() === 2)
            {   // only do this if both player1 and player2 have connected
            
                var nameDiv = $("#your-name");
                var pTag = $("<p>");
                pTag.html("<b>" + playerOne + "</b> vs. <b>" + playerTwo + "</b>");
                nameDiv.append(pTag);
            }
        }
    });

    database.ref("Message").on("value", function(snap)
    {   // The event listener for the for the database reference "/Message"
console.log("Message.on()");
console.log(database);
        // Ignore these events if there are more than two players

        if (numberOfPlayers() > 2) return;

        // These are the messages players send to each other.  Messages generated by the script don't
        // don't need to be shared.

console.log("Message.on()");
        if (snap.val())
        {   
console.log(snap.val());
            pushMessage (snap.val().Message.Message);

        }
    });

    connectedRef.on("value", function(snap)
    {   // manage connections

        if (snap.val())
        {   // Add user to the connections list.
            var con = connectionsRef.push(true);

            // Remove user from the connection list when they disconnect.
            con.onDisconnect().remove();
        }
    });
  
    connectionsRef.on("value", function(snap)
    {   // When first loaded or when the connections list changes.

        var numPlayers = snap.numChildren();
        $("#player-count").text(numPlayers + " players");

console.log("connectionsRef.on()");
console.log("number: ", numPlayers);

        // It's kinda neat to know how many people are connected and playing the game at any given
        // time.  But, I don't want to do anything else after the page is loaded and the player has
        // joined a game.

        if (!isConnected())
        {   // This code should only be done when a browser first connects to the database.

            if ((numPlayers > 0) && (numPlayers < 3))
            {   // And this code should only be done for the forst or second player to connect to
                // the database...

                // First, hide the instructions.  The instructions are displayed by default so that no
                // one after the first or second player will see page elements that they can interact
                // with, but do nothing.  If the players want to see the instructions, they can click
                // on the SHOW INSTRUCTIONS button
                
                $("#instructions").css("display", "none");

                // Now that valid players are connected, I want those hidden elements visible

                $("#game").css("display", "block");

                if (numPlayers === 1)
                {   // This is the first player to connect, initialize the contest.

console.log("initializeGame():");
                    connected = initializeGame (database);
                }
                else
                {   // This is the second player to connect, join in the contest

console.log("joinGame()");        
                    connected = joinGame(database);
                }
            }
            else
            {   // More than two connections.  This game is hot!
            
                // But sorry, it's just a 2-player game
                displayErrorMessage ("You are connection #" + numPlayers + ". Sorry, the game only works for two players.");
            }
        }
    });

    $("#name-button").on("click", function(event)
    {   // The event handler for #name-button

        event.preventDefault();

        console.log("#name-input");
        var tName = $("#name-input").val().trim();

        if (tName)
        {   // Only update the database if the user entered a name
        
            // First, get that name on the page.  This much is the same for both players, but I 
            // want to add a second message if this is the first player.  So makes sence to do this
            // before doing anything player specific.

            $("#your-name").text(tName);

            $("#name-form").css("display", "none");

            pushMessage ("You will be known as " + tName);

            // Now the player specific stuff...it's pretty much the same thing either way

            if (iAmPlayerOne)
            {   playerOneName = tName;

                setName (database, "PlayerOne", tName);

                pushMessage ("Waiting for player two");
            }
            else
            {   playerTwoName = tName;

                setName (database, "PlayerTwo", tName);
            }

            // and hide the name input form
            $("name-form").css("display", "none");
        }
    })
});
